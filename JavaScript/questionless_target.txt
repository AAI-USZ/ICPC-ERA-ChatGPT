function langContext ( req ) { return { lang : req . lang , locale : req . locale , gettext : req . gettext , ngettext : req . ngettext , format : req . format } ; }
function ( ) { Backbone . Syphon . KeyExtractors . unregister ( "text" ) ; }
function ( storageId , key , value , opt_callback ) { var paramObject = { 'storageId' : storageId , 'key' : key , 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.setDOMStorageItem' , paramObject , opt_callback ) ; }
function ( ) { return $curr . removeClass ( "" + options . transition + " out active reverse curr" ) ; }
function ( match , operator , key ) { if ( ! key ) { return operator === '*' ? '.*' : match ; } keys . push ( key ) ; return operator === '*' ? '(.*?)' : '([^/#?]*)' ; }
function ( err , docs ) { if ( ! err ) { var wordviews = docs . length ; cb ( null , { "Word views" : wordviews } ) ; } else { cb ( err , null ) ; } }
function shouldShow ( entry ) { return [ ".git" , ".svn" , ".DS_Store" , "Thumbs.db" ] . indexOf ( entry . name ) === - 1 ; }
function ( ) { var result = subject . _createModel ( { providerType : 'Local' } ) ; assert . equal ( result . providerType , 'Local' ) ; assert . isFalse ( ( '_id' in result ) ) ; }
function ( e ) { if ( e . keyCode == 13 ) { performSearch ( ) ; e . preventDefault ( ) ; } }
function ( emp ) { assert . instanceOf ( emp , Employee ) ; assert . equal ( emp . id , ids [ 6 ] ) next ( ) ; }
function ( ) { $ ( this ) . find ( "*:focus" ) . blur ( ) ; return false ; }
function ( ) { page ++ ; getRelatedContent ( ) ; }
function ( res ) { Object . append ( this , res . value ) ; if ( callback ) { callback ( ) ; } }
function ( style , propName , prevValue , prevPriority , rule , baseText ) { var styleSheet = rule . parentStyleSheet ; if ( styleSheet ) this . markSheetDirty ( styleSheet ) ; }
function ( error , docs ) { console . log ( "Lat/lng inserted" ) }
function ( t ) { loc . modifiersByName [ t ] = modifier ; arr . push ( { name : modifier . name , src : t , value : modifier . value } ) ; }
function finalBarX ( d ) { return chart . x ( ) ( chart . keyFunction ( ) ( d ) ) + chart . margins ( ) . left ; }
function ( ) { this . stopAllActions ( ) ; this . unscheduleAllSelectors ( ) ; this . _arrayMakeObjectsPerformSelector ( this . _children , cc . Node . StateCallbackType . cleanup ) ; }
function ( name , i ) { if ( ! _ . isUndefined ( opts [ name ] ) ) { self . meta [ name ] = opts [ name ] ; } }
function ( ) { controller . adminPath = '/admin' ; controller . addLocation ( '/admin/api' ) ; deepEqual ( controller . locations , [ ] ) ; ok ( utils . startsWith ( mock_ui . lastError , 'Adding sublocations to admin is not supported' ) ) mock_stub . verify ( ) ; }
function ( ) { clearTimeout ( wycVal . timeNum ) ; $ ( this ) . dialog ( "close" ) ; }
function Tilteed ( ) { BaseSite . call ( this ) ; this . siteName = "Tilteed" ; this . siteDisplayName = "Tilteed" ; this . siteURL = "http://www.tilteed.com" ; this . siteFeedURL = "http://www.tilteed.com/home/rss" ; }
function ( err , result ) { expect ( err ) . to . eql ( { errors : { "foo" : "must not be bar" } } ) ; done ( ) ; }
function ( ) { if ( form ) { form . triggerHandler ( 'submit' ) ; } }
function ( ) { var filters = _ . clone ( model . get ( 'query_filters' ) ) || { } ; filters [ filter_group_id ] = filter_group . getFilters ( ) ; model . set ( 'query_filters' , filters ) ; }
function ( frame ) { this . setDisabledImage ( cc . Sprite . createWithSpriteFrameName ( frame ) ) ; }
function ( ) { return this . canvas . context ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getScriptExecutionStatus' , paramObject , opt_callback ) ; }
function ( cfg ) { expect ( cfg . icons . length ) . toEqual ( 1 ) ; expect ( cfg . icons ) . toContain ( "pass.png" ) ; }
function ( done ) { when ( registry . lookup ( 'application/bogus' ) , undefined , function ( ) { assert ( true ) ; } ) . always ( done ) ; }
function ( e ) { e . preventDefault ( ) ; this . hide ( ) ; this . trigger ( 'renameColumn' ) ; return false ; }
function ( subcontext , subtemplate , opt ) { options = opt ; return this . createDocumentFragment ( ) ; }
function SubtitleTableViewCell ( reuseIdentifier ) { Pushpop . TableViewCell . prototype . constructor . apply ( this , arguments ) ; }
function ( ) { var option = $ ( 'option:selected' , this ) ; var uname = getValue ( option . attr ( 'elem_id' ) , 1 , 2 , dataTable_vNetworks ) ; $ ( 'input#NETWORK_UNAME' , section_networks ) . val ( uname ) ; }
function ( ) { var selfWpPoolView = this ; this . phoneNumbersPool . each ( function ( wp ) { selfWpPoolView . appendWorkingPoint ( wp ) ; } ) ; }
function ( error , results ) { if ( ! error ) { var results = JSON . parse ( results . body ) var matches = results && results . Results ? results . Results : null } cb ( error , matches ) }
function browser_followLink ( e ) { e . preventDefault ( ) ; if ( e . target . nodeName === 'A' ) { this . navigate ( e . target . getAttribute ( 'href' ) ) ; } }
function ( time ) { this . unschedule ( this . resumeGrossini ) ; var grossini = this . getChildByTag ( TAG_GROSSINI ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . resumeTarget ( grossini ) ; }
function ( canvas ) { if ( Modernizr . canvas ) { return canvas . getContext ( '2d' ) ; } else { alert ( "Your browser doesn't support the canvas api." ) ; throw "Browser doesn't support canvas api." ; } }
function ( ) { console . log ( 123 ) ; CubeViz_Main_Module . registerDataStructureDefinition ( ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.disable' , paramObject , opt_callback ) ; }
function ( databaseId , opt_callback ) { var paramObject = { 'databaseId' : databaseId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.getDatabaseTableNames' , paramObject , opt_callback ) ; }
function ( ) { testActionStartsModule ( "doConfirmUser" , { email : TEST_EMAIL , siteName : "Unit Test Site" } , "check_registration" ) ; }
function ( filename ) { if ( Path . extname ( filename ) === '.js' ) { files . push ( Path . join ( basePath , folder , filename ) ) ; } }
function ( fontStyle ) { return ( /^(italic|oblique)$/ ) . test ( fontStyle ) ; }
function ( ) { return true ; }
function ( ) { buildUI ( ) ; photodb . scan ( ) ; document . addEventListener ( 'mozvisibilitychange' , function visibilityChange ( ) { if ( ! document . mozHidden ) { photodb . scan ( ) ; } } ) ; }
function ( ) { if ( self . user . is ( "admin" ) ) { dom . get ( "modeSwitch" ) . hide ( ) ; } switchClasses ( "remove" ) ; }
function ( cm ) { cm . setCursor ( moveToWord ( cm , word , - 1 , 1 , "start" ) ) ; }
function ( offsetInPixels ) { this . _offsetInPixels = offsetInPixels ; this . _offset = cc . POINT_PIXELS_TO_POINTS ( this . _offsetInPixels ) ; }
function ( ) { delete data . spiedEvents [ [ this . selector , this . eventName ] ] ; }
function adminPanel_extension_editUser ( id ) { floaterShow ( adminPanel_extension_path + "floaters.php" , "editUser" , 0 , id , 400 , 230 ) ; }
function ( ) { if ( confirm ( "Are you sure you want to delete " + worksheetToEdit + "?" ) ) { hideMenus ( ) ; graphCollection . removeWorksheet ( worksheetToEdit ) ; constructVis ( ) ; $ ( '#worksheetMenu' ) . slideUp ( ) ; } }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getScriptExecutionStatus' , paramObject , opt_callback ) ; }
function ( filepath ) { deepResolve ( self , searchname , filepath , result ) ; }
function ( ) { this . hostEditor . setInlineWidgetHeight ( this , this . $wrapperDiv . height ( ) , true ) ; }
function ( scene ) { return def . string . join ( "," , scene . acts . x . label , scene . acts . y . label ) ; }
function ( cfg ) { expect ( cfg . author . name ) . toEqual ( "" ) ; }
function ( apiObjects , basePath ) { log ( "apiObjects: %o" , basePath ) ; this . apiList . createAll ( apiObjects ) ; this . apiList . each ( function ( api ) { api . setBaseUrl ( basePath ) ; } ) ; }
function ( ) { var params = ModelBase . prototype . getPreset . call ( this ) ; params . params . sunYears = this . getSunYears ( ) ; return params ; }
function ( properties ) { for ( var property in documentProperties ) { if ( documentProperties . hasOwnProperty ( property ) && properties [ property ] ) { documentProperties [ property ] = properties [ property ] } } return this }
function ( ) { Matrix2 . fromRowMajorArray ( { } ) ; }
function browser_urlFocus ( ) { if ( this . currentScreen === this . PAGE_SCREEN ) { this . setUrlBar ( this . currentTab . url ) ; this . urlInput . select ( ) ; this . showAwesomeScreen ( ) ; } }
function ( raw_txt ) { if ( raw_txt != null ) this . text_data . raw_text = raw_txt ; return this . text_data . raw_text ; }
function ( interval , slideControls ) { clearInterval ( interval ) ; slideControls . pauseResume . html ( fn . tmpl ( op . templateControlsPaused , { text : fn . culture } ) ) ; }
function ( ) { if ( $ ( this ) . attr ( 'required' ) ) { self . model . required . push ( $ ( this ) . attr ( 'name' ) ) ; } }
function ( ) { return this . locZ ; }
function ( ) { sp . fireball ( en . enemy ) ; dd . processTick ( ) ; }
function ( ) { return true ; }
function ( ) { this . attachjPlayer ( $ ( "#jPlayer" ) , $ ( "div.toolbar ul.player" ) , $ ( "#Playlist" ) ) ; this . attachDomEvents ( ) ; this . fadeInContent ( ) ; this . attachBubble ( ) ; }
function getNavClasses ( forSectionName ) { return { home : activeIfEquals ( 'home' , forSectionName ) , about : activeIfEquals ( 'about' , forSectionName ) , twitter : activeIfEquals ( 'twitter' , forSectionName ) , reading : activeIfEquals ( 'reading' , forSectionName ) } ; }
function ( ) { return { alt : 20 , lat : null , lon : null } ; }
function ( router , event ) { router . transitionTo ( 'item' , { item_id : event . context . id } ) ; }
function ( ) { return media . youtubeObject . getVolume ( ) / 100 ; }
function ( ) { $ ( "section" ) . css ( { "height" : "" } ) ; }
function ( values ) { if ( values == null ) { return '' ; } return values . join ( ' ' ) ; }
function ( ) { e . dispatch . close ( callback ) ; }
function ( ) { let _text = this . _promptEntry . get_text ( ) ; this . _promptEntry . reactive = false ; this . _promptEntry . add_style_pseudo_class ( 'insensitive' ) ; this . _userVerifier . call_answer_query_sync ( serviceName , _text , null ) ; }
function ( header ) { return this . _wrap_pre ( [ [ "span" , header . name + ":" , "data-spec" , "http#" + header . name ] , [ "span" , " " + header . value ] ] ) ; }
function getSearchCursor ( cm , query , pos ) { return cm . getSearchCursor ( query , pos , typeof query == "string" && query == query . toLowerCase ( ) ) ; }
function ( ) { this . inherited ( arguments ) ; if ( this . region . numComponents ( ) === 1 ) { } }
function ( cb ) { return PostRes . update ( { id : this . _id } , angular . extend ( { } , this , { _id : undefined } ) , cb ) ; }
function dragStart ( e ) { start = [ e . pageX , e . pageY ] ; whenDragStart ( start ) ; handler . mouseover ( dragDisable ) . mouseout ( dragDisable ) . click ( clickDisable ) ; }
function ( error ) { if ( error . code === 'notfound' ) res . send ( "Slider '" + sliderName + "' NOT FOUND" , 404 ) ; else res . send ( error . toString ( ) , 500 ) ; }
function ( ) { assert . deepEqual ( Buffer . concat ( chunks ) , imgBuf ) ; done ( ) ; }
function ( ) { var val = + only_numbers_patt . exec ( $ ( "#circle_size" ) . val ( ) ) ; cityCircle . setRadius ( val * 1000 ) ; $ ( "#size_slider" ) . slider ( "option" , "value" , val ) ; }
function ( err , datas ) { }
function ( condition ) { if ( condition == undefined ) { return true ; } return expr_evaluator . evaluate ( condition ) ; }
function ( ) { log ( 'editAvatarView:render' ) ; this . _initMediaUploader ( ) ; $ ( '#avatar-viewer' ) . append ( '<img src="' + this . model . get ( 'Avatar' ) . Files . ThumbnailMedium . RelativeUri + '" />' ) ; return this ; }
function ( force ) { this . _refresh ( force ) ; }
function ( doc , req ) { doc . title = 'See Reflections Test' ; return { title : doc . title , content : templates . render ( 'see_refl.html' , req , doc ) } ; }
function ( target ) { cc . ActionInterval . prototype . startWithTarget . call ( this , this . _forcedTarget ) ; this . _action . startWithTarget ( this . _forcedTarget ) ; }
function ( ) { assert ( user . isNew ( ) ) ; assert ( ! user . id ) ; user . saveCB ( this ) ; }
function ( ) { if ( fd [ 0 ] === "string" && /^[$_a-z0-9][a-z0-9]*$/ . test ( fd [ 1 ] ) ) { return x + "." + fd [ 1 ] ; } else { return x + "[" + tfd + "]" ; } }
function ( result , status ) { }
function ( event ) { if ( opts . onlyIf ( this ) ) { return fireCallback ( opts . callback , $ ( this ) , event , false ) ; } }
function ( i , group ) { idArr . push ( $ ( group ) . data ( 'groupid' ) ) ; titleArr . push ( $ ( group ) . data ( 'grouptitle' ) ) ; }
function ( ) { return media . youtubeObject . isMuted ( ) ; }
function ( ) { _addLinkLine ( ) ; _addSpeakerLine ( ) ; _claimTalk ( ) ; _editTalkComment ( ) ; _changeAnonymous ( ) ; _claimButton ( ) ; }
function ( ) { for ( var i = 0 ; Gen . data . length > i ; i ++ ) { Gen . locked [ i ] = false ; } Gen . button ( ) ; Gen . show ( ) ; }
